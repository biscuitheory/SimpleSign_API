generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Attendance {
  id                 Int                 @id
  session_start      DateTime            @db.DateTime(0)
  session_end        DateTime            @db.DateTime(0)
  status             Attendance_status   @default(opened)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  studentAttendances StudentAttendance[]

  @@map(name: "Attendances")
}

model Class {
  id          Int          @id @default(autoincrement())
  name        String?      @db.VarChar(255)
  course      String?      @db.VarChar(255)
  date_start  DateTime?    @db.DateTime(0)
  date_end    DateTime?    @db.DateTime(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  classTutors ClassTutor[]
  students    Student[]

  @@map(name: "Classes")
}

model ClassTutor {
  class_id Int
  tutor_id String
  class    Class  @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutor    Tutor  @relation(fields: [tutor_id], references: [id], onUpdate: Cascade)

  @@id([class_id, tutor_id])
  @@index([class_id], name: "fk_ClassTutor_Class_id")
  @@index([tutor_id], name: "fk_ClassTutor_Tutor_id")
  @@map(name: "ClassTutors")
}

model Student {
  id                String              @unique
  class_id          Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  class             Class               @relation(fields: [class_id], references: [id], onUpdate: Cascade)
  user              User                @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentAttendance StudentAttendance[]

  @@id([id, class_id])
  @@index([class_id], name: "fk_StudentClass_id")
  @@map(name: "Students")
}

model StudentAttendance {
  student_id      String
  studentClass_id Int
  attendance_id   Int
  attendance      Attendance @relation(fields: [attendance_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student         Student    @relation(fields: [student_id, studentClass_id], references: [id, class_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([student_id, studentClass_id, attendance_id])
  @@index([attendance_id], name: "fk_StudentAttendance_Attendance_id")
  @@index([student_id, studentClass_id], name: "fk_StudentAttendance_Student_id")
  @@map(name: "StudentAttendances")
}

model Tutor {
  id          String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  User        User         @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classTutors ClassTutor[]

  @@id([id])
  @@map(name: "Tutors")
}

model User {
  id        String     @id @default(uuid())
  firstname String     @db.VarChar(255)
  lastname  String     @db.VarChar(255)
  email     String     @db.VarChar(255)
  password  String     @db.VarChar(255)
  role      User_role? @default(scholar)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  student   Student?
  tutor     Tutor?

  @@map(name: "Users")
}

enum Attendance_status {
  opened
  closed
}

enum User_role {
  scholar
  admin
}